"""Module for generating compact tables for output.

The full tables are automatically generated by the harborapi models, so
we are only concerned with the compact tables here.

A compact table is a table that displays multiple instances of a model
in a single table, rather than one table for each instance (which is what
the full tables do).

Compact tables do not display all of the fields of a model, but only
those that are deemed most relevant to the user.

A compact table is generated by a render function, which is a function
that takes in a harborapi model instance or list of instances and returns
a rich.table.Table object.
"""
from __future__ import annotations

from typing import Callable
from typing import Sequence
from typing import TypeVar

from harborapi.ext.artifact import ArtifactInfo
from harborapi.models.models import Repository
from harborapi.models.models import SystemInfo
from rich.table import Table

from ...utils._types import is_builtin_obj
from .anysequence import AnySequence
from .anysequence import anysequence_table
from .artifact import artifactinfo_table
from .repository import repository_table
from .system import systeminfo_table

T = TypeVar("T")


RENDER_FUNCTIONS = {
    Repository: repository_table,
    ArtifactInfo: artifactinfo_table,
    SystemInfo: systeminfo_table,
    AnySequence: anysequence_table,
}


class BuiltinTypeException(TypeError):
    pass


def get_render_function(obj: T | list[T]) -> Callable[[T | list[T]], Table]:
    """Get the render function for a given object."""

    if isinstance(obj, Sequence):
        if not obj:
            raise ValueError("Cannot render empty sequence.")
        obj = obj[0]
    try:
        return RENDER_FUNCTIONS[obj.__class__]  # type: ignore # TODO: fix typing
    except KeyError:
        if is_builtin_obj(obj):
            raise BuiltinTypeException(
                "Builtin types cannot be rendered as a compact table."
            )
        raise NotImplementedError(f"{type(obj)} not implemented.")
