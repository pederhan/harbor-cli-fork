"""Module for generating compact tables for output.

The full tables are automatically generated by the harborapi models, so
we are only concerned with the compact tables here.

A compact table is a table that displays multiple instances of a model
in a single table, rather than one table for each instance (which is what
the full tables do).

Compact tables do not display all of the fields of a model, but only
those that are deemed most relevant to the user.

A compact table is generated by a render function, which is a function
that takes in a harborapi model instance or list of instances and returns
a rich.table.Table object.
"""
from __future__ import annotations

from typing import Any
from typing import Callable
from typing import Sequence
from typing import TypeVar

from harborapi.ext.artifact import ArtifactInfo
from harborapi.models import Artifact
from harborapi.models import AuditLog
from harborapi.models import Project
from harborapi.models import RegistryProviders
from harborapi.models import Repository
from harborapi.models import Search
from harborapi.models import SystemInfo
from harborapi.models import UserResp
from harborapi.models import UserSearchRespItem
from rich.panel import Panel
from rich.table import Table

from ...models import CommandSummary
from ...models import ProjectExtended
from ...utils._types import is_builtin_obj
from .anysequence import AnySequence
from .anysequence import anysequence_table
from .artifact import artifact_table
from .artifact import artifactinfo_table
from .auditlog import auditlog_table
from .commandsummary import commandsummary_table
from .project import project_extended_panel
from .project import project_table
from .registry import registryproviders_table
from .repository import repository_table
from .search import search_panel
from .system import systeminfo_table
from .user import userresp_table
from .user import usersearchrespitem_table

T = TypeVar("T")


RENDER_FUNCTIONS = {
    AnySequence: anysequence_table,
    ArtifactInfo: artifactinfo_table,
    Artifact: artifact_table,
    AuditLog: auditlog_table,
    CommandSummary: commandsummary_table,
    Project: project_table,
    ProjectExtended: project_extended_panel,
    Repository: repository_table,
    SystemInfo: systeminfo_table,
    Search: search_panel,
    UserResp: userresp_table,
    UserSearchRespItem: usersearchrespitem_table,
    RegistryProviders: registryproviders_table,
}  # type: dict[type, Callable[[Any], Table | Panel]]
# TODO: improve type annotation of this dict


class BuiltinTypeException(TypeError):
    pass


class EmptySequenceError(ValueError):
    pass


def get_render_function(
    obj: T | Sequence[T],
) -> Callable[[Sequence[T]], Table | Panel]:
    """Get the render function for a given object."""

    if isinstance(obj, Sequence):
        if not obj:
            raise EmptySequenceError("Cannot render empty sequence.")
        obj = obj[0]
    try:
        return RENDER_FUNCTIONS[obj.__class__]
    except KeyError:
        if is_builtin_obj(obj):
            raise BuiltinTypeException(
                "Builtin types cannot be rendered as a compact table."
            )
        raise NotImplementedError(f"{type(obj)} not implemented.")


def get_renderable(obj: T | Sequence[T]) -> Table | Panel:
    """Get the renderable for a given object."""
    render_function = get_render_function(obj)
    if not isinstance(obj, Sequence):
        obj = [obj]
    return render_function(obj)
